input {

	file {
		# parse multiline messages (as usual, java error's callstack)
		#codec => multiline {
		#	pattern => "(?<datetime_string>\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3})\s+(?<level>\w+)"
		#	what => "previous"
		#	negate => "true"
		#}
		path => "d:/home/fin/*.csv" #path to solr log
		start_position => beginning
		ignore_older => 0 #do not ignore old messages (default - ignore older than 24 hours)
		sincedb_path => "NUL" #for debug - reading entire file
		type => "bank-record"
	}

}

filter {
	grok {
		match => { "message" => "%{NOTSPACE:transation_date};%{GREEDYDATA:summary};%{NOTSPACE:sum_in_orig_currency};%{WORD:orig_currency};%{NOTSPACE:operation_date};%{NOTSPACE:sum_in_target_currency};%{WORD:direction};%{GREEDYDATA:item_type};%{GREEDYDATA:category};%{GREEDYDATA:category2};%{GREEDYDATA:tags};%{GREEDYDATA:comment}" }
		tag_on_failure => ["_grokfailed_message"]
	}

	grok { match => ["path","%{GREEDYDATA}/%{GREEDYDATA}/%{GREEDYDATA:card}.csv"] }

	date {
		timezone => "UTC"
		match => [ "transation_date", "dd.MM.YYYY" ]
	}

	mutate {
		convert => {
			"sum_in_orig_currency" => "float"
			"sum_in_target_currency" => "float"
		}
	}

}

output {
	if ("_grokfailed_message" not in [tags]) and ("_grokfailed_request_message" not in [tags]) {
		elasticsearch {
			#hosts => ["localhost:9200"]
			index => "logstash-prior4" #default elastic index
			#document_type => "logs" #default elastic type
		}

		#stdout { codec => rubydebug } #for console debug
		#stdout { codec => dots }
		file { path => "d:\home\fin\logstash.out" codec => rubydebug } #for output file debug
	}
	else {
		file { path => "d:\home\fin\logstash-errors.out" codec => rubydebug } #for output file debug
	}
}
